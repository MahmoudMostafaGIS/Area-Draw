{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"D:\\\\Work\\\\Upwork\\\\New\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\Work\\\\Upwork\\\\New\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"D:\\\\Work\\\\Upwork\\\\New\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"D:\\\\Work\\\\Upwork\\\\New\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar MapboxDraw = require(\"@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw\");\n\nvar React = require(\"react\");\n\nvar react_mapbox_gl_1 = require(\"react-mapbox-gl\");\n\nfunction noop() {\n  /* do nothing */\n}\n\nvar DrawControl = /*#__PURE__*/function (_React$Component) {\n  _inherits(DrawControl, _React$Component);\n\n  var _super = _createSuper(DrawControl);\n\n  function DrawControl() {\n    _classCallCheck(this, DrawControl);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DrawControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var map = this.context; // The map needs to be passed in the React Context, or welse we can't do\n      // anything.\n\n      if (!map || !map.getStyle()) {\n        throw new Error('Map is undefined in React context.');\n      }\n\n      var _this$props = this.props,\n          modes = _this$props.modes,\n          onDrawActionable = _this$props.onDrawActionable,\n          onDrawCombine = _this$props.onDrawCombine,\n          onDrawCreate = _this$props.onDrawCreate,\n          onDrawDelete = _this$props.onDrawDelete,\n          onDrawModeChange = _this$props.onDrawModeChange,\n          onDrawRender = _this$props.onDrawRender,\n          onDrawSelectionChange = _this$props.onDrawSelectionChange,\n          onDrawUncombine = _this$props.onDrawUncombine,\n          onDrawUpdate = _this$props.onDrawUpdate,\n          position = _this$props.position; // Define a new Draw Control\n\n      this.draw = new MapboxDraw(Object.assign({}, this.props, {\n        modes: Object.assign({}, MapboxDraw.modes, modes)\n      })); // Add it to our map\n\n      map.addControl(this.draw, position); // Hook draw events\n\n      map.on('draw.actionable', onDrawActionable || noop);\n      map.on('draw.combine', onDrawCombine || noop);\n      map.on('draw.create', onDrawCreate || noop);\n      map.on('draw.delete', onDrawDelete || noop);\n      map.on('draw.modechange', onDrawModeChange || noop);\n      map.on('draw.render', onDrawRender || noop);\n      map.on('draw.selectionchange', onDrawSelectionChange || noop);\n      map.on('draw.uncombine', onDrawUncombine || noop);\n      map.on('draw.update', onDrawUpdate || noop);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var map = this.context;\n\n      if (!map || !map.getStyle()) {\n        return;\n      }\n\n      if (!this.draw) {\n        return;\n      }\n\n      map.removeControl(this.draw);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return DrawControl;\n}(React.Component);\n\nDrawControl.contextType = react_mapbox_gl_1.MapContext;\nDrawControl.defaultProps = {\n  position: 'top-left'\n};\nexports.default = DrawControl;","map":null,"metadata":{},"sourceType":"script"}